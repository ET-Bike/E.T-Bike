/**
 * KTH Developed by Java <br>
 *
 * @Copyright 2011 by Service Platform Development Team, KTH, Inc. All rights reserved.
 *
 * This software is the confidential and proprietary information of KTH, Inc. <br>
 * You shall not disclose such Confidential Information and shall use it only <br>
 * in accordance with the terms of the license agreement you entered into with KTH.
 */
package com.paran.animation.demo.app.animation;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.util.FloatMath;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.AnimationUtils;
import android.view.animation.RotateAnimation;
import android.view.animation.ScaleAnimation;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.paran.animation.demo.app.R;

/**
 * com.paran.animation.demo.app.animation.Path.java - Creation date: 2011. 12.
 * 21. <br>
 * Path 硫붾돱 �붾㈃ Demo
 * 
 * @author KTH �⑤쭚�댄뵆由ъ��댁뀡媛쒕컻���띿꽦��Email: breadval@kthcorp.com, Ext: 2923)
 * @version 1.0
 * @tags
 */
public class Path extends Activity implements View.OnClickListener {
	private Context context;

	/**
	 * 硫붾돱媛��대졇�꾨븣 �대룞 嫄곕━
	 */
	private static final int length = 220;
	/**
	 * (+)踰꾪듉 �숈옉 �쒓컙
	 */
	private static final int duration = 100;
	/**
	 * �섏쐞 硫붾돱 �숈옉 �쒓컙
	 */
	private static final int sub_duration = 200;
	/**
	 * �섏쐞 硫붾돱 �좏깮���숈옉 �쒓컙
	 */
	private static final int sub_select_duration = 200;
	/**
	 * �섏쐞 硫붾돱 �숈옉��媛�踰꾪듉媛꾩쓽 �쒓컙 Gap
	 */
	private static final int sub_offset = 30;

	private Button plus_button;
	private ImageView plus;

	/**
	 * �섏쐞 硫붾돱 踰꾪듉 由ъ뒪��
	 */
	private ArrayList<PathButton> buttons;

	/**
	 * Menu 媛��대젮�덈뒗吏��ロ��덈뒗吏�泥댄겕�섍린�꾪븳 flag
	 */
	private boolean isMenuOpened = false;

	String TAG = "Path";

	public final OnTouchListener myTouchListener = new OnTouchListener() {
		public boolean onTouch(View v, MotionEvent event) {
			
			

			for (int i = 0; i < buttons.size(); i++) {
				Rect hitRect = new Rect();
				buttons.get(i).getHitRect(hitRect); // 강제로 hitRect 를 확인함.
				if (hitRect.contains((int) event.getX(), (int) event.getY())) {
					Toast.makeText(context, "터치", Toast.LENGTH_LONG).show();
					startSubButtonSelectedAnimation(i);

					return true;
				}

				return false;

			}
			return false;

		}

		
		
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.path);

		context = this;
		

		plus_button = (Button) findViewById(R.id.plus_button);

		plus_button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (!isMenuOpened) {
					isMenuOpened = true;
				} else {
					isMenuOpened = false;
				}
				startMenuAnimation(isMenuOpened);
			}
		});

		// plus_button.setTouchDelegate(new TouchDelegate(bounds,
		// delegateView));

		plus = (ImageView) findViewById(R.id.plus);

		buttons = new ArrayList<PathButton>();
		
		findViewById(R.id.viewGroup).setOnTouchListener(myTouchListener);
		

		PathButton button = (PathButton) findViewById(R.id.camera);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);
		

		button = (PathButton) findViewById(R.id.with);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.place);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.music);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.thought);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.sleep);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);

	}

	/**
	 * <PRE>
	 * Comment : <br> 
	 * �섏쐞 硫붾돱媛��좏깮�섏뿀���� �좊땲硫붿씠��泥섎━
	 * �좏깮��硫붾돱��而ㅼ�硫댁꽌 �먯젏 �щ챸�댁��ㅺ� �щ씪吏�ŉ, 
	 * �섎㉧吏�硫붾돱���묒븘吏�㈃���먯젏 �щ챸�댁��ㅺ� �щ씪吏꾨떎.
	 * (+)踰꾪듉���ロ엺 �곹깭濡��뚯븘媛꾨떎.
	 * 
	 * @author kth
	 * @version 1.0
	 * @date 2011. 12. 22.
	 * </PRE>
	 * 
	 * @param index
	 *            �좏깮��踰꾪듉��index
	 */
	private void startSubButtonSelectedAnimation(int index) {
		for (int i = 0; i < buttons.size(); i++) {
			if (index == i) {
				PathButton view = buttons.get(i);

				AnimationSet animation = new AnimationSet(false);

				Animation translate = new TranslateAnimation(0.0f,
						view.getXOffset(), 0.0f, view.getYOffset());
				translate.setDuration(0);

				Animation scale = new ScaleAnimation(1.0f, 2.5f, 1.0f, 2.5f,
						Animation.RELATIVE_TO_SELF, 0.5f,
						Animation.RELATIVE_TO_SELF, 0.5f);
				scale.setDuration(sub_select_duration);

				Animation alpha = new AlphaAnimation(1.0f, 0.0f);
				alpha.setDuration(sub_select_duration);

				animation.addAnimation(scale);
				animation.addAnimation(translate);
				animation.addAnimation(alpha);

				view.startAnimation(animation);
			} else {
				PathButton view = buttons.get(i);

				AnimationSet animation = new AnimationSet(false);

				Animation translate = new TranslateAnimation(0.0f,
						view.getXOffset(), 0.0f, view.getYOffset());
				translate.setDuration(0);

				Animation scale = new ScaleAnimation(1.0f, 0.0f, 1.0f, 0.0f,
						Animation.RELATIVE_TO_SELF, 0.5f,
						Animation.RELATIVE_TO_SELF, 0.5f);
				scale.setDuration(sub_select_duration);

				Animation alpha = new AlphaAnimation(1.0f, 0.0f);
				alpha.setDuration(sub_select_duration);

				animation.addAnimation(scale);
				animation.addAnimation(translate);
				animation.addAnimation(alpha);

				view.startAnimation(animation);
			}
		}

		if (isMenuOpened) {
			isMenuOpened = false;

			Animation rotate = new RotateAnimation(-45, 0,
					Animation.RELATIVE_TO_SELF, 0.5f,
					Animation.RELATIVE_TO_SELF, 0.5f);

			rotate.setInterpolator(AnimationUtils.loadInterpolator(this,
					android.R.anim.anticipate_overshoot_interpolator));
			rotate.setFillAfter(true);
			rotate.setDuration(sub_select_duration);
			plus.startAnimation(rotate);
		}
	}

	/**
	 * <PRE>
	 * Comment : <br>
	 * �섏쐞 硫붾돱媛��대━嫄곕굹 �ロ옄���좊땲硫붿씠��泥섎━
	 * �섏쐞 硫붾돱���뚯쟾�섎㈃���대룞�쒕떎.
	 * Dynamic���④낵瑜��꾪빐 Interpolater瑜��ъ슜�쒕떎.
	 * @author kth
	 * @version 1.0
	 * @date 2011. 12. 22.
	 * </PRE>
	 * 
	 * @param index
	 *            踰꾪듉 index
	 * @param totalcount
	 * @param open
	 */
	private void startSubButtonAnimation(int index, boolean open) {

		PathButton view = buttons.get(index);

		float endX = length
				* FloatMath.cos((float) (Math.PI * 1 / 2 * (index) / (buttons
						.size() - 1)));
		float endY = length
				* FloatMath.sin((float) (Math.PI * 1 / 2 * (index) / (buttons
						.size() - 1)));

		AnimationSet animation = new AnimationSet(false);
		

		Animation translate;
		Animation rotate = new RotateAnimation(0, 360,
				Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
				0.5f);
		rotate.setDuration(sub_duration);
		rotate.setRepeatCount(1);
		rotate.setInterpolator(AnimationUtils.loadInterpolator(this,
				android.R.anim.accelerate_interpolator));

		if (open) {
			translate = new TranslateAnimation(0.0f, endX, 0.0f, -endY);
			translate.setDuration(sub_duration);
			translate.setInterpolator(AnimationUtils.loadInterpolator(this,
					android.R.anim.overshoot_interpolator));
			translate.setStartOffset(sub_offset * index);

			view.setOffset(endX, -endY);
		} else {
			translate = new TranslateAnimation(endX, 0, -endY, 0);
			translate.setDuration(sub_duration);
			translate.setStartOffset(sub_offset
					* (buttons.size() - (index + 1)));
			translate.setInterpolator(AnimationUtils.loadInterpolator(this,
					android.R.anim.anticipate_interpolator));

			view.setOffset(-endX, endY);
		}

		animation.setFillAfter(true);
		animation.addAnimation(rotate);
		animation.addAnimation(translate);
		animation.setAnimationListener(aniListener);
		view.startAnimation(animation);
	}

	/**
	 * <PRE>
	 * Comment : <br>
	 * (+)踰꾪듉���뚮��꾨븣 �좊땲硫붿씠��泥섎━
	 * (+)踰꾪듉��45���뚯쟾�섎ŉ
	 * �섏쐞 硫붾돱��startSubButtonAnimation瑜�媛곴컖 �몄텧�섏뿬 �붾㈃���섏삤寃뚮맂��
	 * @author kth
	 * @version 1.0
	 * @date 2011. 12. 22.
	 * </PRE>
	 * 
	 * @param open
	 */
	private void startMenuAnimation(boolean open) {
		Animation rotate;

		if (open)
			rotate = new RotateAnimation(0, 45, Animation.RELATIVE_TO_SELF,
					0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
		else
			rotate = new RotateAnimation(-45, 0, Animation.RELATIVE_TO_SELF,
					0.5f, Animation.RELATIVE_TO_SELF, 0.5f);

		rotate.setInterpolator(AnimationUtils.loadInterpolator(this,
				android.R.anim.anticipate_overshoot_interpolator));
		rotate.setFillAfter(true);
		rotate.setDuration(duration);
		plus.startAnimation(rotate);

		for (int i = 0; i < buttons.size(); i++) {
			startSubButtonAnimation(i, open);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.view.View.OnClickListener#onClick(android.view.View)
	 */
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.camera: {
			Toast.makeText(context, "Camera Clicked", Toast.LENGTH_SHORT)
					.show();
			startSubButtonSelectedAnimation(0);
		}
			break;
		case R.id.with: {
			Toast.makeText(context, "With Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(1);
		}
			break;
		case R.id.place: {
			Toast.makeText(context, "Place Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(2);
		}
			break;
		case R.id.music: {
			Toast.makeText(context, "Music Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(3);
		}
			break;
		case R.id.thought: {
			Toast.makeText(context, "Thought Clicked", Toast.LENGTH_SHORT)
					.show();
			startSubButtonSelectedAnimation(4);
		}
			break;
		case R.id.sleep: {
			Toast.makeText(context, "Sleep Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(5);
		}
			break;
		}

	}

	Animation.AnimationListener aniListener = new Animation.AnimationListener() {

		public void onAnimationStart(Animation animation) {

		}

		public void onAnimationRepeat(Animation animation) {

		}

		public void onAnimationEnd(Animation animation) {

			for (int i = 0; i < buttons.size(); i++) {
				float endX = length
						* FloatMath
								.cos((float) (Math.PI * 1 / 2 * (i) / (buttons
										.size() - 1)));
				float endY = length
						* FloatMath
								.sin((float) (Math.PI * 1 / 2 * (i) / (buttons
										.size() - 1)));
				// buttons.get(i).layout((int)endX, 0, 0, (int)endY);

				// Log.e("offset"+"x == " +buttons.get(i).getXOffset(), "y == "
				// + buttons.get(i).getYOffset());
				
//				buttons.get(i).offsetLeftAndRight(30);
//				buttons.get(i).offsetTopAndBottom(-120);
				// Log.e("realpath"+"x == " +endX, "y == " + endY);

				// Log.e(TAG,"animation chaged");

			}

		}
	};

}
