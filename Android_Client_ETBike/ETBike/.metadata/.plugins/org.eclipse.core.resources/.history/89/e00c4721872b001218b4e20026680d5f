/**
 * KTH Developed by Java <br>
 *
 * @Copyright 2011 by Service Platform Development Team, KTH, Inc. All rights reserved.
 *
 * This software is the confidential and proprietary information of KTH, Inc. <br>
 * You shall not disclose such Confidential Information and shall use it only <br>
 * in accordance with the terms of the license agreement you entered into with KTH.
 */
package com.paran.animation.demo.app.animation;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.util.FloatMath;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.AnimationUtils;
import android.view.animation.RotateAnimation;
import android.view.animation.ScaleAnimation;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

import com.swmaestro.etbike.activity.R;



/**
 * com.paran.animation.demo.app.animation.Path.java - Creation date: 2011. 12.
 * 21. <br>
 * Path 筌롫뗀��占쎈뗀��Demo
 * 
 * @author KTH 占썩뫀彛싷옙�꾨탣�귐딉옙占쎈똻�▼첎�뺤뻣占쏙옙占쎈씮苑�옙占폜mail: breadval@kthcorp.com, Ext: 2923)
 * @version 1.0
 * @tags
 */
public class Path extends Activity implements View.OnClickListener {
	private Context context;

	/**
	 * 筌롫뗀�긷첎占쏙옙��죬占쎄쑬釉�占쎈�猷�椰꾧퀡��
	 */
	private static final int length = 220;
	/**
	 * (+)甕곌쑵��占쎌늿��占쎌뮄而�
	 */
	private static final int duration = 100;
	/**
	 * 占쎌꼷��筌롫뗀��占쎌늿��占쎌뮄而�
	 */
	private static final int sub_duration = 200;
	/**
	 * 占쎌꼷��筌롫뗀��占쎌쥚源�옙占쏙옙�덉삂 占쎌뮄而�
	 */
	private static final int sub_select_duration = 200;
	/**
	 * 占쎌꼷��筌롫뗀��占쎌늿�됵옙占썲첎占썼린袁る뱣揶쏄쑴��占쎌뮄而�Gap
	 */
	private static final int sub_offset = 30;

	private Button plus_button;
	private ImageView plus;

	/**
	 * 占쎌꼷��筌롫뗀��甕곌쑵���귐딅뮞占쏙옙
	 */
	private ArrayList<PathButton> buttons;

	/**
	 * Menu 揶쏉옙占쎈���옙�덈뮉筌욑옙占썬꺆占쏙옙�덈뮉筌욑옙筌ｋ똾寃뺧옙�띾┛占쎄쑵釉�flag
	 */
	private boolean isMenuOpened = false;

	String TAG = "Path";

	public final OnTouchListener myTouchListener = new OnTouchListener() {
		public boolean onTouch(View v, MotionEvent event) {
			
			for (int i = 0; i < buttons.size(); i++) {
				Log.e("i == " +i, "here");
				Rect hitRect = new Rect();
				buttons.get(i).getHitRect(hitRect); // 媛뺤젣濡�hitRect 瑜��뺤씤��
				if (hitRect.contains((int) event.getX(), (int) event.getY()) && isMenuOpened == true) {
					Toast.makeText(context, "�곗튂", Toast.LENGTH_LONG).show();
					startSubButtonSelectedAnimation(i);

					return true;
				}
			}
			return false;

		}

		
		
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.home);

		context = this;
		

		plus_button = (Button) findViewById(R.id.plus_button);

		plus_button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (!isMenuOpened) {
					isMenuOpened = true;
				} else {
					isMenuOpened = false;
				}
				startMenuAnimation(isMenuOpened);
			}
		});

		// plus_button.setTouchDelegate(new TouchDelegate(bounds,
		// delegateView));

		plus = (ImageView) findViewById(R.id.plus);

		buttons = new ArrayList<PathButton>();
		
		
		

		PathButton button = (PathButton) findViewById(R.id.camera);
		button.setOnClickListener(this);
//		button.setOnTouchListener(myTouchListener);
		buttons.add(button);
		

		button = (PathButton) findViewById(R.id.with);
		button.setOnClickListener(this);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.place);
		button.setOnClickListener(this);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.music);
		button.setOnClickListener(this);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.thought);
		button.setOnClickListener(this);
		buttons.add(button);

		button = (PathButton) findViewById(R.id.sleep);
		button.setOnClickListener(this);
		buttons.add(button);
		
		findViewById(R.id.viewGroup).setOnTouchListener(myTouchListener);

	}

	/**
	 * <PRE>
	 * Comment : <br> 
	 * 占쎌꼷��筌롫뗀�긷첎占쏙옙醫뤾문占쎌꼷肉�옙占쏙옙占�占쎌쥓�뀐쭖遺우뵠占쏙옙筌ｌ꼶��
	 * 占쎌쥚源�옙占쏙쭖遺얜뤀占쏙옙�뚣끉占쏙쭖�곴퐣 占쎈Ŋ��占싼됱구占쎈똻占쏙옙�븝옙 占싼됱뵬筌욑옙흭, 
	 * 占쎌꼶�㏆쭪占쏙쭖遺얜뤀占쏙옙占쎈쵐釉섓쭪占썬늺占쏙옙占쎈Ŋ��占싼됱구占쎈똻占쏙옙�븝옙 占싼됱뵬筌욊쑬��
	 * (+)甕곌쑵�됵옙占쏙옙��뿺 占쎄낱源�에占쏙옙��툡揶쏄쑬��
	 * 
	 * @author kth
	 * @version 1.0
	 * @date 2011. 12. 22.
	 * </PRE>
	 * 
	 * @param index
	 *            占쎌쥚源�옙占썼린袁る뱣占쏙옙index
	 */
	private void startSubButtonSelectedAnimation(int index) {
		for (int i = 0; i < buttons.size(); i++) {
			if (index == i) {
				PathButton view = buttons.get(i);

				AnimationSet animation = new AnimationSet(false);

				Animation translate = new TranslateAnimation(0.0f,
						view.getXOffset(), 0.0f, view.getYOffset());
				translate.setDuration(0);

				Animation scale = new ScaleAnimation(1.0f, 2.5f, 1.0f, 2.5f,
						Animation.RELATIVE_TO_SELF, 0.5f,
						Animation.RELATIVE_TO_SELF, 0.5f);
				scale.setDuration(sub_select_duration);

				Animation alpha = new AlphaAnimation(1.0f, 0.0f);
				alpha.setDuration(sub_select_duration);

				animation.addAnimation(scale);
				animation.addAnimation(translate);
				animation.addAnimation(alpha);

				view.startAnimation(animation);
			} else {
				PathButton view = buttons.get(i);

				AnimationSet animation = new AnimationSet(false);

				Animation translate = new TranslateAnimation(0.0f,
						view.getXOffset(), 0.0f, view.getYOffset());
				translate.setDuration(0);

				Animation scale = new ScaleAnimation(1.0f, 0.0f, 1.0f, 0.0f,
						Animation.RELATIVE_TO_SELF, 0.5f,
						Animation.RELATIVE_TO_SELF, 0.5f);
				scale.setDuration(sub_select_duration);

				Animation alpha = new AlphaAnimation(1.0f, 0.0f);
				alpha.setDuration(sub_select_duration);

				animation.addAnimation(scale);
				animation.addAnimation(translate);
				animation.addAnimation(alpha);

				view.startAnimation(animation);
			}
		}

		if (isMenuOpened) {
			isMenuOpened = false;

			Animation rotate = new RotateAnimation(-45, 0,
					Animation.RELATIVE_TO_SELF, 0.5f,
					Animation.RELATIVE_TO_SELF, 0.5f);

			rotate.setInterpolator(AnimationUtils.loadInterpolator(this,
					android.R.anim.anticipate_overshoot_interpolator));
			rotate.setFillAfter(true);
			rotate.setDuration(sub_select_duration);
			plus.startAnimation(rotate);
		}
	}

	/**
	 * <PRE>
	 * Comment : <br>
	 * 占쎌꼷��筌롫뗀�긷첎占쏙옙��봺椰꾧퀡援�占썬꺆�꾬옙占쏙옙醫딅빍筌롫뗄�좑옙占쏙㎗�롡봺
	 * 占쎌꼷��筌롫뗀�깍옙占쏙옙��읈占쎌꼶�껓옙占쏙옙��짗占쎌뮆��
	 * Dynamic占쏙옙占썩몿�든몴占쏙옙袁る퉸 Interpolater�쒙옙占싼딆뒠占쎌뮆��
	 * @author kth
	 * @version 1.0
	 * @date 2011. 12. 22.
	 * </PRE>
	 * 
	 * @param index
	 *            甕곌쑵��index
	 * @param totalcount
	 * @param open
	 */
	private void startSubButtonAnimation(int index, boolean open) {

		PathButton view = buttons.get(index);

		float endX = length
				* FloatMath.cos((float) (Math.PI * 1 / 2 * (index) / (buttons
						.size() - 1)));
		float endY = length
				* FloatMath.sin((float) (Math.PI * 1 / 2 * (index) / (buttons
						.size() - 1)));

		AnimationSet animation = new AnimationSet(false);
		

		Animation translate;
		Animation rotate = new RotateAnimation(0, 360,
				Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
				0.5f);
		rotate.setDuration(sub_duration);
		rotate.setRepeatCount(1);
		rotate.setInterpolator(AnimationUtils.loadInterpolator(this,
				android.R.anim.accelerate_interpolator));

		if (open) {
			translate = new TranslateAnimation(0.0f, endX, 0.0f, -endY);
			translate.setDuration(sub_duration);
			translate.setInterpolator(AnimationUtils.loadInterpolator(this,
					android.R.anim.overshoot_interpolator));
			translate.setStartOffset(sub_offset * index);

			view.setOffset(endX, -endY);
		} else {
			translate = new TranslateAnimation(endX, 0, -endY, 0);
			translate.setDuration(sub_duration);
			translate.setStartOffset(sub_offset
					* (buttons.size() - (index + 1)));
			translate.setInterpolator(AnimationUtils.loadInterpolator(this,
					android.R.anim.anticipate_interpolator));

			view.setOffset(-endX, endY);
		}

		animation.setFillAfter(true);
		animation.addAnimation(rotate);
		animation.addAnimation(translate);
		animation.setAnimationListener(aniListener);
		view.startAnimation(animation);
	}

	/**
	 * <PRE>
	 * Comment : <br>
	 * (+)甕곌쑵�됵옙占쏙옙��옙占쎄쑬釉�占쎌쥓�뀐쭖遺우뵠占쏙옙筌ｌ꼶��
	 * (+)甕곌쑵�됵옙占�5占쏙옙占쎈슣�억옙�렽�
	 * 占쎌꼷��筌롫뗀�깍옙占퐏tartSubButtonAnimation�쒙옙揶쏄낫而�占쎈챷�㏆옙�뤿연 占쎈뗀�껓옙占쏙옙�륁궎野껊슢留귨옙占�
	 * @author kth
	 * @version 1.0
	 * @date 2011. 12. 22.
	 * </PRE>
	 * 
	 * @param open
	 */
	private void startMenuAnimation(boolean open) {
		Animation rotate;

		if (open)
			rotate = new RotateAnimation(0, 45, Animation.RELATIVE_TO_SELF,
					0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
		else
			rotate = new RotateAnimation(-45, 0, Animation.RELATIVE_TO_SELF,
					0.5f, Animation.RELATIVE_TO_SELF, 0.5f);

		rotate.setInterpolator(AnimationUtils.loadInterpolator(this,
				android.R.anim.anticipate_overshoot_interpolator));
		rotate.setFillAfter(true);
		rotate.setDuration(duration);
		plus.startAnimation(rotate);

		for (int i = 0; i < buttons.size(); i++) {
			startSubButtonAnimation(i, open);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.view.View.OnClickListener#onClick(android.view.View)
	 */
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.camera: {
			Toast.makeText(context, "Camera Clicked", Toast.LENGTH_SHORT)
					.show();
			startSubButtonSelectedAnimation(0);
		}
			break;
		case R.id.with: {
			Toast.makeText(context, "With Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(1);
		}
			break;
		case R.id.place: {
			Toast.makeText(context, "Place Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(2);
		}
			break;
		case R.id.music: {
			Toast.makeText(context, "Music Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(3);
		}
			break;
		case R.id.thought: {
			Toast.makeText(context, "Thought Clicked", Toast.LENGTH_SHORT)
					.show();
			startSubButtonSelectedAnimation(4);
		}
			break;
		case R.id.sleep: {
			Toast.makeText(context, "Sleep Clicked", Toast.LENGTH_SHORT).show();
			startSubButtonSelectedAnimation(5);
		}
			break;
		}

	}

	Animation.AnimationListener aniListener = new Animation.AnimationListener() {

		public void onAnimationStart(Animation animation) {

		}

		public void onAnimationRepeat(Animation animation) {

		}

		public void onAnimationEnd(Animation animation) {

			for (int i = 0; i < buttons.size(); i++) {
				float endX = length
						* FloatMath
								.cos((float) (Math.PI * 1 / 2 * (i) / (buttons
										.size() - 1)));
				float endY = length
						* FloatMath
								.sin((float) (Math.PI * 1 / 2 * (i) / (buttons
										.size() - 1)));
				// buttons.get(i).layout((int)endX, 0, 0, (int)endY);

				// Log.e("offset"+"x == " +buttons.get(i).getXOffset(), "y == "
				// + buttons.get(i).getYOffset());
				
//				buttons.get(i).offsetLeftAndRight(30);
//				buttons.get(i).offsetTopAndBottom(-120);
				// Log.e("realpath"+"x == " +endX, "y == " + endY);

				// Log.e(TAG,"animation chaged");

			}

		}
	};

}
